<%-include("header-main")-%>
</header>
<div class="table-title">
    <h6><i class="bi bi-person-fill"></i> Logged in as: <b><%=user.name %></b></h6>

</div>
    <div class="container">
        
        

        <div id="token-portfolio" class="container">
            

            <section id="pieAndValue" class="sectionA">
                <canvas width="500" height="500" id="myChart"></canvas>
            </section>
             
    
            <section class="sectionB">
                <h2>Current Balance: </h2>
                <div class="total">
                    <h1>Â£</h1>
                    <h1 class="total-value"></h1>
                </div>
                
            </section>

           
            
        </div>

        <section class="sectionC">
            <div class="table-title">
                <h5><i class="bi bi-plus-circle"></i> ADD NEW ASSET :</h5>
            </div>
            <form id="tokenForm">
                <div class="mb-3 input-row">
                    <label for="newToken">Asset Name: </label>
                    <input type="text" class="form-control" id="newToken" placeholder="e.g. Bitcoin" required>             
                </div>
                <div class="mb-3 input-row">
                    <label for="newQty">Quantity: </label>
                    <input type="number" step="any" class="form-control" id="newQty" placeholder="..." required>             
                </div>
                <div class="mb-3 input-row">
                    <button id="addButton" class="btn btn-primary" type="submit">Add</button>             
                </div>   
            </form>  
        </section>

        <section class="sectionD">
            
            <div class="user-token-table">
                
                <table id="portTable" class="table-body table table-dark table-hover table-lg">
                    <thead>
                      <tr>
                        <td id="stickTable"></td>
                        <td id="stickTable">Name</td>
                        <td id="stickTable">Price</td>
                        <td id="stickTable">Quantity</td>
                        <td id="stickTable">Balance</td>
                        <td id="stickTable"></td>
                      </tr>
                    </thead>
                    <tbody class="table-body" id="tb"></tbody>
                  </table>
            </div>

        </section>
        

        
    </div>


    <script>
        
        //INIT VARIABLES
        let labels = [];
        let valueArray = [];
        let assetTable = [];

        const backgroundColor = [];
        const table = document.querySelector("#tb");
        const totalValue = document.querySelector(".total-value");
      

        function checkLS() {
            if (localStorage.getItem("labels") === "[]") {
                localStorage.clear();
            }
        }
       

        checkLS();

        getDataFromLocalStorage();
        
        

        //UPDATE TOTAL VALUE
        const updateTotalValue = function(valueArray){
            let result = 0;

            for (let i = 0; i < valueArray.length; i++){
                                
                result += parseFloat(valueArray[i]);
                                
            }
            totalValue.innerHTML = `${result.toLocaleString("en-US")}`;           
        }

        const randomColor = function (labels){
            
            for (i = 0; i <labels.length; i++){
                const r = Math.floor(Math.random() * 235);
                const g = Math.floor(Math.random() * 55);
                const b = Math.floor(Math.random() * 255);
                backgroundColor.push(`rgb(${r}, ${g}, ${b}`);
            }
        }

        updateTotalValue(valueArray);
        randomColor(labels);
        

        const ctx = document.querySelector("#myChart").getContext("2d");


        let data = {
            labels,
            datasets: [
                {
                data: valueArray,
                backgroundColor: backgroundColor,
                borderWidth: 2,
                hoverOffset: 15,
                hoverBackgroundColor: backgroundColor,
                  
            }
        ]
        };

        const config = {
            type: "doughnut",
            data: data,
            options: {
                
               
                responsive: false,
                aspectRatio: 1,
                legend: {
                    position: 'bottom',
                }

            }
        }

        const myChart = new Chart(ctx, config);
        myChart.update();

        

        //STORE IN LS
        function storeDataInLocalStorage() {
            checkLS()
            if(!localStorage.getItem("labels") === null) {
                assetTable = JSON.parse(localStorage.getItem("assetTable"))
                labels = JSON.parse(localStorage.getItem("labels"));
                valueArray = JSON.parse(localStorage.getItem("valueArray"));
            }
            let dataArray = [];
            let rows = table.rows;

            //LOOP THROUGH T ROWS
            for (let i = 0; i < rows.length; i++) {

                let cells = rows[i].cells;
                let rowArray = [];
                //LOOP THROUGH T CELLS
                for (let j = 0; j < cells.length; j++) {

                    rowArray.push(cells[j].innerHTML);
                }
                
                dataArray.push(rowArray);
                assetTable = dataArray; 
            }

           
            
            localStorage.setItem("labels", JSON.stringify(labels));
            localStorage.setItem("valueArray", JSON.stringify(valueArray));
            localStorage.setItem("assetTable", JSON.stringify(assetTable));

        }

        //GET DATA FROM LS
        function getDataFromLocalStorage() {
            checkLS()
            if(localStorage.getItem("labels") === null) {
                console.log("No data in local storage.")
            } else {
                labels = JSON.parse(localStorage.getItem("labels"));
                valueArray = JSON.parse(localStorage.getItem("valueArray"));
                assetTable = JSON.parse(localStorage.getItem("assetTable"));
            
                for (let i = 0; i < assetTable.length; i++) {

                    let rowData = assetTable[i];

                    let row = table.insertRow();

                    for (let j = 0; j < rowData.length; j++) {
                        let cellData = rowData[j];
                        let cell = row.insertCell();
                        cell.innerHTML = cellData;
                    }
                }
                
            
            
            }
            
        }
      

        
        
        //POPULATE LIST WITH USER FORM INPUT
         
        document.querySelector("#tokenForm").addEventListener("submit", (e) => {
            // INIT FORM VARIABLES
            let tokenName = document.querySelector("#newToken").value;
            let tokenQty = document.querySelector("#newQty").value;
            let userTokenList = document.querySelector(".utl")
            //
            
            
            //API TOKEN NAME CALL ERRORS
            if(tokenName.toLowerCase() === "quant"){
                tokenName = "quant-network";
            } else if (tokenName.toLowerCase() === "xrp"){
                tokenName = "ripple";
            } else if (tokenName.includes(" ")) {
                tokenName = tokenName.replace(" ", "-");
            }



            
            searchTableForDuplicate = function () {
            //GET TABLE ELEMENT
             
            if (table.rows.length > 1) {
            //ITERATE THROUGH TABLE BACKWARDS
            for (let i = 0; i < table.rows.length; i++) {
                for (let j = i + 1; j < table.rows.length; j++) {
                // GET TABLE ROW VARIABLE
                let tr = table.getElementsByTagName("tr");
                //TABLE ROW, 1ST CELL, i
                let td = tr[i].getElementsByTagName("td")[1];
                //TABLE ROW, 1ST CELL, j
                let tdp = tr[j].getElementsByTagName("td")[1];

                //CHECK FOR EQUALITY
                if (tdp.innerHTML === td.innerHTML) {

                    //REMOVE SPECIFIC VALUE BY FINDING INDEX
                    let valueIndex = valueArray.indexOf(parseFloat(td.nextElementSibling.nextElementSibling.nextElementSibling.innerHTML).toFixed(2))
                    let tempValueIndex = valueArray.indexOf(parseFloat(tdp.nextElementSibling.nextElementSibling.nextElementSibling.innerHTML).toFixed(2))
                    let labelIndex = labels.indexOf(td.innerHTML)


                    let a = parseFloat(valueArray[valueIndex]);
                    let b = parseFloat(valueArray[tempValueIndex]); 
                    let tempValue = parseFloat(b + a).toFixed(2);
             

                    valueArray[valueIndex] = tempValue;
                
                
                    valueArray.splice(tempValueIndex, 1);
                   
                    labels.splice(labelIndex, 1);
                    console.log(valueArray)               

                    //ADD QTY (IN ROW)
                    tdp.nextElementSibling.nextElementSibling.innerHTML = `${
                    parseFloat(td.nextElementSibling.nextElementSibling.innerHTML) +
                    parseFloat(tdp.nextElementSibling.nextElementSibling.innerHTML)}`;

                    //ADD BALANCE (IN ROW)
                    tdp.nextElementSibling.nextElementSibling.nextElementSibling.innerHTML = 
                    `${
                    parseFloat(td.nextElementSibling.nextElementSibling.nextElementSibling.innerHTML) +
                    parseFloat(tdp.nextElementSibling.nextElementSibling.nextElementSibling.innerHTML)}`;
                    
                    
                    myChart.update();

                    td.parentElement.remove();

                    
                }
                }
            }
            }
            }

            fetch(`https://api.coingecko.com/api/v3/coins/markets?vs_currency=gbp&ids=${tokenName.toLowerCase()}&order=market_cap_desc&per_page=100&page=1&sparkline=false`)
            .then((data) => {
                return data.json();
            })
            .then((tokenData) => {
                tokenData.map((values) => {
                    let tableData = "";
                    //Iterate through object and append data to table
                    tokenData.map((values) => {
                        
                        tableData += 
                        `<tr>
                        <td><img id="img-logo" src="${values.image}"></td>   
                        <td>${values.name}</td>
                        <td>Â£${values.current_price}</td>
                        <td>${tokenQty}</td>
                        <td>${parseFloat(values.current_price*tokenQty).toFixed(2)}</td>
                        <td><i id="del-data" class="del bi bi-trash"></i></td>
                        </tr>`;

                        //UPDATE CHART
                        labels.push(values.name);
                        // chartData.push(parseFloat(values.current_price*tokenQty).toFixed(2));
                        
                        
                        valueArray.push(parseFloat(values.current_price*tokenQty).toFixed(2));
                        

                        updateTotalValue(valueArray);
                        randomColor(labels);


                        myChart.update();
                    })
                    document.querySelector("tbody").innerHTML += tableData; 
                    
                    searchTableForDuplicate();
                    storeDataInLocalStorage();
                    
                    document.getElementById("tokenForm").reset();
                });
                
            });
            e.preventDefault();
        })


        //REMOVE VALUE FROM ARRAY                       
        document.querySelector(".table-body").addEventListener("click", (e) => {      
            
            const delItem = e.target.closest("#del-data");
            const nameValue = delItem.parentElement.previousElementSibling.previousElementSibling.previousElementSibling.previousElementSibling.innerHTML;
            const lineValue = delItem.parentElement.previousElementSibling.innerHTML;

            if (delItem !== null) {
                
                //REMOVE SPECIFIC VALUE BY FINDING INDEX
                const valueIndex = valueArray.indexOf(parseFloat(lineValue).toFixed(2))
                const labelIndex = labels.indexOf(nameValue)
                
                valueArray.splice(valueIndex, 1); 
                labels.splice(labelIndex, 1);
                
                
                //REMOVE TABLE ROW ELEMENT
                delItem.parentElement.parentElement.remove();   
                
   
            }
            
            updateTotalValue(valueArray);  
            storeDataInLocalStorage();
            myChart.update();
            checkLS()
            e.preventDefault();
        }); 
    

        // document.addEventListener("DOMContentLoaded", getDataFromLocalStorage);



    </script>









<%-include("footer")-%>